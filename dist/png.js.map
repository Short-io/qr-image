{"version":3,"file":"png.js","sourceRoot":"","sources":["../src/png.ts"],"names":[],"mappings":"AAAA,MAAM,IAAI,GAAG,OAAO,CAAC,OAAO;IAC1B,CAAC,CAAC,OAAO,CAAC,uBAAuB,CAAC;IAClC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AACpB,MAAM,EAAE,EAAE,EAAE,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AACpC,MAAM,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAE1C,KAAK,UAAU,MAAM,CAAC,IAAI,EAAE,SAAS;IACnC,MAAM,OAAO,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC;IACtC,MAAM,MAAM,GAAG,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;IAC7D,OAAO,GAAG,CAAC,EAAE,MAAM,EAAE,GAAG,OAAO,EAAE,CAAC,CAAC;AACrC,CAAC;AAED,KAAK,UAAU,GAAG,CAAC,EACjB,MAAM,EACN,IAAI,EACJ,MAAM,EACN,IAAI,EACJ,SAAS,EACT,UAAU,EACV,KAAK,EACL,OAAO,GACR;IACC,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;IACxB,MAAM,QAAQ,GAAG,MAAM,GAAG,IAAI,CAAC;IAC/B,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,QAAQ,GAAG,CAAC,CAAC;IACtD,MAAM,IAAI,GAAG,MAAM,IAAI,OAAO,CAC5B,CAAC,OAAO,EAAE,EAAE,CACV,IAAI,IAAI,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAC1E,CAAC;IACF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;QAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YAC5C,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,EAAE,KAAK,IAAI,CAAC,EAAE;gBAC5C,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,EAAE,KAAK,IAAI,CAAC,EAAE;oBAC5C,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;wBAChB,IAAI,CAAC,aAAa,CAChB,KAAK,EACL,CAAC,GAAG,IAAI,GAAG,KAAK,GAAG,QAAQ,EAC3B,CAAC,GAAG,IAAI,GAAG,KAAK,GAAG,QAAQ,CAC5B,CAAC;qBACH;iBACF;aACF;SACF;KACF;IACD,IAAI,IAAI,EAAE;QACR,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,QAAQ,CAAC,MAAM,CACb,CAAC,SAAS,GAAG,GAAG,CAAC,GAAG,SAAS,EAC7B,CAAC,UAAU,GAAG,GAAG,CAAC,GAAG,SAAS,CAC/B,CAAC;QACF,IAAI,CAAC,IAAI,CACP,QAAQ,EACR,SAAS,GAAG,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,SAAS,EACjD,SAAS,GAAG,CAAC,GAAG,CAAC,UAAU,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,SAAS,CACnD,CAAC;KACH;IAED,OAAO,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;AAC1C,CAAC;AAED,MAAM,CAAC,OAAO,GAAG,EAAE,MAAM,EAAE,CAAC","sourcesContent":["const Jimp = process.browser\n  ? require('jimp/browser/lib/jimp')\n  : require('jimp');\nconst { QR } = require('./qr-base');\nconst { getOptions } = require('./utils');\n\nasync function getPNG(text, inOptions) {\n  const options = getOptions(inOptions);\n  const matrix = QR(text, options.ec_level, options.parse_url);\n  return PNG({ matrix, ...options });\n}\n\nasync function PNG({\n  matrix,\n  size,\n  margin,\n  logo,\n  logoWidth,\n  logoHeight,\n  color,\n  bgColor,\n}) {\n  const N = matrix.length;\n  const marginPx = margin * size;\n  const imageSize = matrix.length * size + marginPx * 2;\n  const jimp = await new Promise(\n    (resolve) =>\n      new Jimp(imageSize, imageSize, bgColor, (err, image) => resolve(image))\n  );\n  for (let y = 0; y < N; y += 1) {\n    for (let x = 0; x < matrix[y].length; x += 1) {\n      for (let sizeX = 0; sizeX < size; sizeX += 1) {\n        for (let sizeY = 0; sizeY < size; sizeY += 1) {\n          if (matrix[y][x]) {\n            jimp.setPixelColor(\n              color,\n              x * size + sizeX + marginPx,\n              y * size + sizeY + marginPx\n            );\n          }\n        }\n      }\n    }\n  }\n  if (logo) {\n    const logoJimp = await Jimp.read(logo);\n    logoJimp.resize(\n      (logoWidth / 100) * imageSize,\n      (logoHeight / 100) * imageSize\n    );\n    jimp.blit(\n      logoJimp,\n      imageSize / 2 - (logoWidth / 2 / 100) * imageSize,\n      imageSize / 2 - (logoHeight / 2 / 100) * imageSize\n    );\n  }\n\n  return jimp.getBufferAsync('image/png');\n}\n\nmodule.exports = { getPNG };\n"]}